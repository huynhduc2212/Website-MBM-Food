const User = require("../models/User");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");

// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
const register = async (userData) => {
  const user = new User(userData);
  await user.save();
  return { message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" };
};

// ƒêƒÉng nh·∫≠p
const login = async (email, password) => {
  const user = await User.findOne({ email });
  // console.log("User t·ª´ DB:", user); // ‚úÖ Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
  if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) throw new Error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
  const token = jwt.sign(
    { userId: user._id, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: "12h" }
  );
  return { token, user }; // ‚úÖ Tr·∫£ v·ªÅ c·∫£ user
};

// L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng v√† ph√¢n trang
const getAllUsers = async (page = 1, limit = 10) => {
  try {
    page = Math.max(1, page);
    limit = Math.max(1, limit);

    const skip = (page - 1) * limit;

    const users = await User.find().skip(skip).limit(limit);
    const totalUsers = await User.countDocuments();

    return {
      users,
      totalUsers,
      totalPages: Math.ceil(totalUsers / limit),
      currentPage: page,
    };
  } catch (error) {
    console.error("Database query error:", error);
    throw new Error("Kh√¥ng th·ªÉ truy v·∫•n danh s√°ch ng∆∞·ªùi d√πng");
  }
};

// X√≥a ng∆∞·ªùi d√πng theo ID
const deleteUser = async (userId) => {
  const user = await User.findByIdAndDelete(userId);
  if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  return { message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" };
};

// C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng theo ID
const updateUser = async (userId, updateData) => {
  const user = await User.findByIdAndUpdate(userId, updateData, { new: true });
  if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  return { message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user };
};

const updatePassword = async (userId, oldPassword, newPassword) => {
  const user = await User.findById(userId);
  if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");

  // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
  const isPasswordValid = await bcrypt.compare(oldPassword, user.password);
  if (!isPasswordValid) throw new Error("M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c");

  user.password = newPassword;

  await user.save();

  return { message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng" };
};

// T√¨m ng∆∞·ªùi d√πng theo username
const findUserByName = async (username) => {
  const user = await User.findOne({ username });
  if (!user) throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
  return user;
};
const findUserById = async (userId) => {
  const user = await User.findById(userId);
  if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  return user;
};
// Th√™m ƒë·ªãa ch·ªâ m·ªõi
const addAddress = async (req, res) => {
  try {
    const { userId } = req.user;
    const { address } = req.body;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi address th√†nh m·∫£ng n·∫øu c·∫ßn
    if (!Array.isArray(user.address)) {
      user.address = [];
    }

    user.address.push(address);
    await user.save();

    res
      .status(200)
      .json({ message: "ƒê√£ th√™m ƒë·ªãa ch·ªâ m·ªõi", addresses: user.address });
  } catch (error) {
    console.error("L·ªói server:", error);
    res.status(500).json({ message: error.message });
  }
};
// Update ƒë·ªãa ch·ªâ
const updateAddress = async (userId, addressId, updatedAddress) => {
  const user = await User.findById(userId);
  if (!user) {
    throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  }

  // T√¨m ƒë·ªãa ch·ªâ theo `addressId`
  const addressIndex = user.address.findIndex(
    (addr) => addr._id.toString() === addressId
  );
  if (addressIndex === -1) {
    throw new Error("ƒê·ªãa ch·ªâ kh√¥ng t·ªìn t·∫°i");
  }

  // C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãa ch·ªâ
  user.address[addressIndex] = {
    ...user.address[addressIndex],
    ...updatedAddress,
  };

  // N·∫øu c√≥ ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh, ƒë·∫∑t l·∫°i t·∫•t c·∫£ tr∆∞·ªõc khi c·∫≠p nh·∫≠t
  if (updatedAddress.default) {
    user.address.forEach((addr) => (addr.default = false));
    user.address[addressIndex].default = true;
  }

  await user.save();
  return user.address;
};

const toggleUserStatus = async (userId) => {
  try {
    console.log("üîç Checking user ID:", userId);

    const user = await User.findById(userId);
    if (!user) {
      console.log("‚ö†Ô∏è User not found!");
      return null;
    }

    // Ch·ªâ c·∫≠p nh·∫≠t tr∆∞·ªùng `isActive`, kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn `address`
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $set: { isActive: !user.isActive } },
      { new: true } // Tr·∫£ v·ªÅ d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    );

    console.log("‚úÖ User updated successfully:", updatedUser);
    return updatedUser;
  } catch (error) {
    console.error("üî• Error in toggleUserStatus:", error);
    throw new Error(error.message);
  }
};
const sendResetPasswordEmail = async (email) => {
  const user = await User.findOne({ email });
  if (!user) throw { status: 404, message: "Email kh√¥ng t·ªìn t·∫°i!" };
  console.log("JWT_SECRET khi t·∫°o token:", process.env.JWT_SECRET);
  // T·∫°o token JWT c√≥ hi·ªáu l·ª±c 15 ph√∫t
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
    expiresIn: "5m",
  });

  const resetLink = `https://mbmfood.store/reset-password/${token}`;

  // C·∫•u h√¨nh g·ª≠i email
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: process.env.EMAIL_USER,
    to: email,
    subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
    text: `B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Nh·∫•n v√†o link sau ƒë·ªÉ ti·∫øp t·ª•c: ${resetLink}. Link c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`,
    html: `<p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Nh·∫•n v√†o link sau ƒë·ªÉ ti·∫øp t·ª•c:</p>
             <a href="${resetLink}">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
             <p>Link c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.</p>`,
  });

  return "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i!";
};

// H√†m ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
const resetPassword = async (token, newPassword) => {
  try {
    console.log("JWT_SECRET khi verify token:", process.env.JWT_SECRET);
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const user = await User.findById(decoded.id);
    console.log(user);

    if (!user) throw { status: 404, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };
    console.log(newPassword);
    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = newPassword;

    user.password = hashedPassword;
    await user.save();

    return "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!";
  } catch (error) {
    throw { status: 400, message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" };
  }
};

const addAddressFromBooking = async (userId, name, phone) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      throw new Error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p");
    }

    if (!Array.isArray(user.address)) {
      user.address = [];
    }

    const bookingAddress = {
      name: name,
      phone: phone,
      company: "Kh√¥ng c√≥",
      address: "Ch∆∞a c·∫≠p nh·∫≠t",
      city: "Ch∆∞a c·∫≠p nh·∫≠t",
      district: "Ch∆∞a c·∫≠p nh·∫≠t",
      ward: "Ch∆∞a c·∫≠p nh·∫≠t",
      zip: "000000",
      default: false,
      default: false,
    };

    user.address.push(bookingAddress);
    await user.save();

    return {
      message: "ƒê√£ th√™m th√¥ng tin li√™n h·ªá t·ª´ ƒë·∫∑t b√†n",
      address: bookingAddress,
    };
  } catch (error) {
    console.error("L·ªói service:", error);
    throw error;
  }
};
const deleteAddress = async (userId, addressId) => {
  const user = await User.findById(userId);
  if (!user) throw new Error('User not found');

  const addressIndex = user.address.findIndex(addr => addr._id.toString() === addressId);
  if (addressIndex === -1) throw new Error('Address not found');

  // N·∫øu ƒë·ªãa ch·ªâ b·ªã x√≥a l√† ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
  const isDefault = user.address[addressIndex].default;

  user.address.splice(addressIndex, 1);

  // C·∫≠p nh·∫≠t l·∫°i defaultAddress n·∫øu c·∫ßn
  if (isDefault) {
      const newDefault = user.address.find(addr => addr.default);
      user.defaultAddress = newDefault ? newDefault._id : null;
  }

  await user.save();
  return user;
};
module.exports = {
  deleteAddress,
  sendResetPasswordEmail,
  resetPassword,
  toggleUserStatus,
  addAddress,
  updatePassword,
  getAllUsers,
  deleteUser,
  updateUser,
  findUserByName,
  register,
  login,
  findUserById,
  updateAddress,
  addAddressFromBooking,
};
