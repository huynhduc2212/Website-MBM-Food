export interface Post {
  _id: string;
  title: string;
  slug: string;
  create_at: string | number | Date;
  summary?: string;
  content?: string;
  imageSummary?: string;
  author?: string;
  status: number; // Th√™m status v√†o interface
  view:number;
}

// ‚úÖ Fetch t·∫•t c·∫£ b√†i vi·∫øt c√≥ status = 1
export const fetchNews = async (): Promise<Post[]> => {
  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_URL_IMAGE}/api/posts`);
    if (!res.ok) throw new Error(`L·ªói khi l·∫•y tin t·ª©c! M√£ l·ªói: ${res.status}`);

    const data = await res.json();

    if (!data.posts || !Array.isArray(data.posts)) {
      throw new Error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu 'posts'");
    }

    // üî• L·ªçc ch·ªâ l·∫•y b√†i vi·∫øt c√≥ status = 1
    const filteredPosts = data.posts.filter((post: Post) => post.status === 1);

    return filteredPosts;
  } catch (error) {
    console.error("L·ªói khi fetch tin t·ª©c:", error);
    return [];
  }
};

// ‚úÖ Fetch tin n·ªïi b·∫≠t c√≥ status = 1
export const fetchFeaturedNews = async (): Promise<Post[]> => {
  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_URL_IMAGE}/api/posts/newest/4`);
    if (!res.ok) throw new Error("L·ªói khi l·∫•y tin n·ªïi b·∫≠t!");

    const data = await res.json();

    // üî• L·ªçc ch·ªâ l·∫•y b√†i vi·∫øt c√≥ status = 1
    const filteredPosts = data.filter((post: Post) => post.status === 1);
    return filteredPosts;
  } catch (error) {
    console.error("L·ªói khi fetch tin n·ªïi b·∫≠t:", error);
    return [];
  }
};

// ‚úÖ Fetch chi ti·∫øt b√†i vi·∫øt (ch·ªâ n·∫øu status = 1)
export const fetchNewsDetail = async (slug: string): Promise<Post | null> => {
  if (!slug) {
    console.error("fetchNewsDetail: Slug b·ªã thi·∫øu");
    return null;
  }

  try {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_URL_IMAGE}/api/posts/slug/${slug}`
    );
    if (!res.ok)
      throw new Error(`B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i! M√£ l·ªói: ${res.status}`);

    const data: Post = await res.json();
    console.log("D·ªØ li·ªáu tr·∫£ v·ªÅ:", data);

    // üî• Ki·ªÉm tra b√†i vi·∫øt c√≥ status = 1 hay kh√¥ng
    if (!data || typeof data !== "object" || data.status !== 1) {
      throw new Error("B√†i vi·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã");
    }

    return data;
  } catch (error) {
    console.error("L·ªói khi fetch b√†i vi·∫øt:", error);
    return null;
  }
};
export const incrementView = async (postId: string): Promise<void> => {
  try {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_URL_IMAGE}/api/posts/${postId}/increment-view`, // üëà URL c·ª• th·ªÉ
      {
        method: "PUT",
      }
    );


    if (!res.ok) {
      const errorBody = await res.text(); // üëà L·∫•y n·ªôi dung l·ªói t·ª´ backend
      console.error("Kh√¥ng th·ªÉ tƒÉng l∆∞·ª£t xem. M√£ l·ªói:", res.status, "Chi ti·∫øt:", errorBody);
      return;
    }

    console.log("‚úÖ L∆∞·ª£t xem ƒë√£ ƒë∆∞·ª£c tƒÉng!");
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ªçi API tƒÉng l∆∞·ª£t xem:", error);
  }
};

